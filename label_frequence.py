import jsonimport matplotlib.pyplot as pltpath="/Users/ayten/Documents/SoccerNet/spotting-ball-2024/train/england_efl/2019-2020/2019-10-01 - Reading - Fulham/"# %% JSON dosyasÄ±nÄ± okuwith open(path+"/Labels-ball.json", "r", encoding="utf-8") as f:    data = json.load(f)#%%from collections import defaultdictfrom dataModel import Root,Annotation,Labels,Train_video_path ,videosfrom utils import game_time_to_frame#%%# Etiket baÅŸÄ±na en fazla 100 kayÄ±t eklemek iÃ§in sÃ¶zlÃ¼k oluÅŸturlabel_counts = defaultdict(list)# JSON'daki annotation verilerini iÅŸlefor annotation in data["annotations"]:    label = annotation["label"]        # EÄŸer bu etiketten 100'den az varsa listeye ekle    if len(label_counts[label]) < 100:        label_counts[label].append(            Annotation(                gameTime=annotation["gameTime"],                label=label,                position=annotation["position"],                team=annotation["team"],                visibility=annotation["visibility"]            )        )#%%# Etiketler ve kayÄ±t sayÄ±larÄ±nÄ± allabels = list(label_counts.keys())counts = [len(label_counts[label]) for label in labels]print(sum(counts))#%%# Grafik Ã§izmeplt.figure(figsize=(10, 5))plt.bar(labels, counts, color="skyblue")plt.xlabel("Etiket TÃ¼rleri")plt.ylabel("KayÄ±t SayÄ±sÄ±")plt.title("Her Etiketten Maksimum 100 KayÄ±t AlÄ±ndÄ±ktan Sonraki DaÄŸÄ±lÄ±m")plt.xticks(rotation=45)plt.grid(axis="y", linestyle="--", alpha=0.7)# GrafiÄŸi gÃ¶sterplt.show()#%%import cv2import jsonimport osdef save_video_sequences(video_path, annotations, output_folder):    """ Belirtilen etiketlere gÃ¶re video sekanslarÄ±nÄ± keser ve kaydeder. """    os.makedirs(output_folder, exist_ok=True)    cap = cv2.VideoCapture(video_path)    frame_rate = cap.get(cv2.CAP_PROP_FPS)      print("Bilgi: FrameRate,",frame_rate) # Videonun FPS deÄŸerini al    if not cap.isOpened():        print("Hata: Video dosyasÄ± aÃ§Ä±lamadÄ±!")        return        for label in Labels:        for item in annotations[label]:            current_frame = game_time_to_frame(item.gameTime, frame_rate)                        if current_frame == -1:                continue  # HatalÄ± zaman verisi varsa atla                        # 1 saniye Ã¶ncesi ve sonrasÄ± iÃ§in frame hesapla            start_frame = max(0, current_frame - frame_rate)  # Ã–nceki saniye            middle_frame = current_frame  # AsÄ±l etiket frame'i            end_frame = current_frame + frame_rate  # Sonraki saniye            frames_to_capture = [start_frame, middle_frame, end_frame]            frames = []            for frame_no in frames_to_capture:                cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)                ret, frame = cap.read()                if ret:                    frames.append(frame)            # EÄŸer 3 frame alÄ±nmÄ±ÅŸsa kaydet,veya bir tane olsadaa            if len(frames) >0:                sequence_filename = os.path.join(output_folder, f"{item.label}_{current_frame}.mp4")                fourcc = cv2.VideoWriter_fourcc(*'mp4v')                height, width, _ = frames[0].shape                out = cv2.VideoWriter(sequence_filename, fourcc, frame_rate, (width, height))                for frame in frames:                    out.write(frame)                out.release()    cap.release()    print("ğŸ“‚ TÃ¼m sekanslar baÅŸarÄ±yla kaydedildi!")# Ã–rnek KullanÄ±m:video_file = "/Users/ayten/Documents/SoccerNet/spotting-ball-2024/train/england_efl/2019-2020/2019-10-01 - Reading - Fulham/224p.mp4"  # GerÃ§ek video yolunu yaz # GerÃ§ek etiket dosyanÄ± yazoutput_folder = "video_seq_Reading-Fulham"#%%# Ã–rnek video dosyasÄ± ve Ã§Ä±ktÄ± klasÃ¶rÃ¼output_folder = "ReadingFulham_video_sequences"# Fonksiyonu Ã§alÄ±ÅŸtÄ±rsave_video_sequences(video_file, label_counts,output_folder)